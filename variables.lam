B = (^x y z.x(y z))
Bp = (^x y z.y(x z))
C = (^x y z.x z y)
K = (^x y.x)
I = (S K K)
S = (^x y z.x z(y z))
W = (S S (S K))
Wlambda = (^x y.x y y)
Y = (^x.(^y.x(y y))(^y.x(y y)))
A = (^x y.y(x x y))
T = (A A)
app = (S (S K))
applambda = (^f x.f x)
selfapp = (S S S I I)
false = (S K)
true = K
if = I
not = C
notlambda = (^x.if x false true)
and = (S S K)
andlambda = (^x y.x y x)
andif = (^x y.if x (if y true false) false)
scheffer = (^x y.if x false (if y false true))
notscheffer = (^x.scheffer x x)
or = (^x y.x x y)
hook = (^x y.or x (not y))
zero = false
isZero = (^n.n (^z.false) true)
succ = (^n f x.f (n f x))
one = (succ zero)
two = (succ one)
three = (succ two)
four = (succ three)
five = (succ four)
six = (succ five)
seven = (succ six)
eight = (succ seven)
nine = (succ eight)
onecomb = (S (S K))
add = (^m n f x.m f (n f x))
mul = (^m n f.m (n f))
muladd = (^m n.m (add n) zero)
expadd = (^m n.m (mul n) one)
exp = expadd
pred = (^n f x.n (^g h.h (g f)) (^u.x) (^u.u))
predadd = (^n.n (^g k (g one) (^u. add (g k) one) k) (^l.zero) zero)
pair = (^x y c.c x y)
fst = (^c.c true)
snd = (^c.c false)
cons = pair
head = fst
tail = snd
empty = (^x.true)
isEmpty = (^c.(c (^x y.false)))
nextFact = (^f n.if (isZero n) one (mul n (f (pred n))))
fact = (Y nextFact)
